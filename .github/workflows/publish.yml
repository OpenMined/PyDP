name: Publish PyDP

on:
  release:
    types: [published]

jobs:
  deploy:
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup msbuild Windows
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Update environment variables Windows
        if: runner.os == 'Windows'
        # See:
        #   - On Bazel cache: https://docs.bazel.build/versions/master/output_directories.html
        #   - On problems with `tar.exe`: https://github.com/actions/cache/issues/576
        run: |
          echo "BAZEL_CACHE_DIR=$env:USERPROFILE\_bazel_$env:USERNAME" >> $env:GITHUB_ENV
          echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"

      - name: Mount bazel cache Windows
        if: runner.os == 'Windows'
        # Note: Note that below the version is pinned to `v2.1.4`. This is due to
        # several path bugs. See:
        # https://stackoverflow.com/questions/66870002/github-actions-cache-maven-m2-repository-on-windows-environment-c-users-run
        uses: actions/cache@v2.1.4
        with:
          path: ${{ env.BAZEL_CACHE_DIR}}
          key: ${{ runner.os }}-bazel-${{ hashFiles('WORKSPACE') }}
          restore-keys: ${{ runner.os }}-bazel

      - name: Mount bazel cache macOS
        if: runner.os == 'macOS'
        uses: actions/cache@v2
        with:
          # See https://docs.bazel.build/versions/master/output_directories.html
          path: /private/var/tmp/_bazel_${{ env.USER }}
          key: ${{ runner.os }}-bazel-${{ hashFiles('WORKSPACE') }}
          restore-keys: ${{ runner.os }}-bazel

      - name: Mount bazel cache Linux
        if: runner.os == 'Linux'
        uses: actions/cache@v2
        with:
          # See https://docs.bazel.build/versions/master/output_directories.html
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-${{ hashFiles('WORKSPACE') }}
          restore-keys: ${{ runner.os }}-bazel

      - name: Build Google DP Unix
        if: runner.os != 'Windows'
        timeout-minutes: 20
        run: |
          BAZEL_CONFIG_OS=$(python -c "print('${{ matrix.os }}'.split('-')[0].lower().replace('ubuntu', 'linux'))")
          echo "Running: ${{ matrix.os }}"
          echo "Using BAZEL_CONFIG_OS: $BAZEL_CONFIG_OS"
          bazel --output_base ./bazel-cache build --config $BAZEL_CONFIG_OS src/python:pydp
          cp -f ./bazel-bin/src/bindings/_pydp.so ./src/pydp

      - name: Build Google DP Windows
        if: runner.os == 'Windows'
        timeout-minutes: 20
        run: |
          echo "Running: ${{ matrix.os }}"
          bazel.exe --output_base ./bazel-cache build --config windows src/python:pydp
          copy ./bazel-bin/src/bindings/_pydp.so ./src/pydp/_pydp.pyd

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Get poetry cache dir
        id: poetry-cache
        run: |
          echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: poetry cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry install

      - name: Build PyDP macOS
        if: runner.os == 'macOS'
        run: |
          poetry run python setup.py build bdist_wheel --plat-name macosx_10_14_x86_64

      - name: Build PyDP Linux / Windows
        if: runner.os != 'macOS'
        run: |
          poetry run python setup.py build bdist_wheel

      - name: Install Wheel Unix
        if: runner.os != 'Windows'
        run: |
          pip install `find -L ./ -name "*.whl"`

      - name: Install Wheel Windows
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem -Path ./ -Filter "*.whl" -Recurse -File | foreach {pip install $_.FullName}

      - name: Import Package
        run: |
          python -c "import pydp; print(pydp.__version__)"

      - name: Run Pytest
        run: |
          poetry run pytest tests -n auto

      - name: Check Wheel Unix
        if: runner.os != 'Windows'
        run: |
          twine check `find -L ./ -name "*.whl"`

      - name: Check Wheel Windows
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem -Path ./ -Filter "*.whl" -Recurse -File | foreach {twine check $_.FullName}

      - name: Renaming wheel
        if: runner.os == 'Linux'
        run: |
          find . -name '*linux*.whl' -type f -exec bash -c 'mv "$1" "${1/linux/manylinux1}"' -- {} \;

      # - name: Publishing the wheel
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.TOKEN }}
      #   run: |
      #     twine upload --skip-existing dist/*.whl
