name: Linux Package PyPI deploy

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up submodules
        run: |
          git submodule update --init --recursive
          cd third_party/differential-privacy
          git checkout 2b320f8c03ba97215e3de7f7782eb5b8fd0b2354
          cd -
          rm -rf third_party/differential-privacy/java
          rm -rf third_party/differential-privacy/examples/java
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pre-requisites
        run: |
          sudo apt-get update
          # checking for g++
          dpkg -s g++ &> /dev/null
          if [ $? -eq 0 ]; then
              echo "g++ is installed, skipping..."
          else
              echo "Installing g++"
              sudo apt-get install g++
          fi
          echo "Installing Bazel dependencies"
          sudo apt-get install pkg-config zip zlib1g-dev unzip
          echo "Donwloading Bazel 2.1.0"
          wget https://github.com/bazelbuild/bazel/releases/download/2.1.0/bazel-2.1.0-installer-linux-x86_64.sh

          chmod +x bazel-2.1.0-installer-linux-x86_64.sh
          ./bazel-2.1.0-installer-linux-x86_64.sh --user
          export PATH="$PATH:$HOME/bin"

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine
          pip install wheel
          pip install setuptools

      - name: Build pydp lib
        run: |
          bazel build --config Linux src/python:bindings_test  --verbose_failures
          rm -f _pydp.so
          cp -f ./bazel-bin/src/bindings/_pydp.so ./pydp

      - name: Build wheel
        run: |
          python setup.py bdist_wheel

      - name: Renaming wheel
        run: |
          find . -name '*linux*.whl' -type f -exec bash -c 'mv "$1" "${1/linux/manylinux1}"' -- {} \;

      - name: Publishing the wheel
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TOKEN }}
        run: |
          twine upload --skip-existing dist/*.whl
