name: Tests

on:
  pull_request:
    branches:
      - dev
    paths:
      - "*.bazel"
      - "*.cpp"
      - "*.c"
      - "*.cc"
      - "*.hpp"
      - "*.h"
      - "*.py"
      - "*.go"
      - "*.mod"
      - "*.toml"
      - "*.txt"
      - "setup.cfg"
      - ".github/workflows/*.yml"

jobs:
  linting:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install python dependencies
        run: |
          pip install black mypy
      - name: Black
        run: |
          black .
      - name: MyPY
        run: |
          mypy src tests
      - name: Run clang-format style check for C/C++ programs.
        uses: jidicula/clang-format-action@v3.3.0
        with:
          clang-format-version: "13"
          check-path: "/src/bindings/"
          fallback-style: "Google" # optional

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        # python-version: [3.6, 3.7, 3.8, 3.9]
        python-version: [3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Setup Bazel
      #   uses: abhinavsingh/setup-bazel@v3
      #   with:
      #     version: 3.7.2

      # - name: Use Bazel (Windows only)
      #   if: matrix.os == 'windows'
      #   run: |
      #     ./bazel.exe --version

      - name: Use Bazelisk
        if: startsWith(runner.os, 'Windows') != true
        run: |
          which bazelisk

      - name: Use Bazelisk
        if: startsWith(runner.os, 'Windows')
        run: |
          where bazelisk

      - name: Build Google DP CPP
        if: startsWith(runner.os, 'Windows') != true
        run: |
          BAZEL_CONFIG_OS=python -c 'print("${{ matrix.os }}".split("-")[0])'
          echo "Running: ${{ matrix.os }}"
          echo "Using BAZEL_CONFIG_OS: $BAZEL_CONFIG_OS"
          bazelisk build --config $BAZEL_CONFIG_OS src/python:pydp
          cp -f ./bazel-bin/src/bindings/_pydp.so ./src/pydp

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Get poetry cache dir
        id: poetry-cache
        run: |
          echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: poetry cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry install

      - name: Build PyDP
        if: ${{ matrix.os }} == 'macos'
        run: |
          poetry run python setup.py build bdist_wheel --plat-name macosx_10_14_x86_64

      - name: Build PyDP
        if: ${{ matrix.os }} != 'macos'
        run: |
          poetry run python setup.py build bdist_wheel

      - name: Install Wheel
        run: |
          pip install `find -L ./ -name "*.whl"`

      - name: Import Package
        run: |
          python -c "import pydp; print(pydp.__verision)"

      - name: Run Pytest
        run: |
          pytest tests -n auto
