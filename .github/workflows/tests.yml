name: Tests

on:
  pull_request:
    branches:
      - dev
    paths:
      - "*.bazel"
      - "*.cpp"
      - "*.c"
      - "*.cc"
      - "*.hpp"
      - "*.h"
      - "*.py"
      - "*.go"
      - "*.mod"
      - "*.toml"
      - "*.txt"
      - "setup.cfg"
      - ".github/workflows/*.yml"

jobs:
  linting:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install python dependencies
        run: |
          pip install black mypy
      - name: Black
        run: |
          black .
      - name: MyPY
        run: |
          mypy src tests
      - name: Run clang-format style check for C/C++ programs.
        uses: jidicula/clang-format-action@v3.3.0
        with:
          clang-format-version: "11"
          check-path: "/src/bindings/"
          fallback-style: "Google" # optional

  build:
    runs-on: ${{ matrix.os }}
    # needs: [linting]
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: [3.6, 3.7, 3.8, 3.9]
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup msbuild
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Cache Bazel
        if: runner.os == 'Linux'
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/bazel
          key: ${{ runner.os }}-${{ hashFiles('**/BUILD') }}

      - name: Build Google DP Unix
        if: runner.os != 'Windows'
        timeout-minutes: 20
        run: |
          BAZEL_CONFIG_OS=$(python -c "print('${{ matrix.os }}'.split('-')[0].lower().replace('ubuntu', 'linux'))")
          echo "Running: ${{ matrix.os }}"
          echo "Using BAZEL_CONFIG_OS: $BAZEL_CONFIG_OS"
          bazel build --config $BAZEL_CONFIG_OS src/python:pydp
          cp -f ./bazel-bin/src/bindings/_pydp.so ./src/pydp

      - name: Build Google DP Windows
        if: runner.os == 'Windows'
        timeout-minutes: 20
        run: |
          echo "Running: ${{ matrix.os }}"
          bazel.exe build --config windows src/python:pydp
          copy ./bazel-bin/src/bindings/_pydp.so ./src/pydp/_pydp.pyd

      - name: Upgrade pip
        run: |
          pip install --upgrade --user pip

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Get poetry cache dir
        id: poetry-cache
        run: |
          echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: poetry cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          poetry install

      - name: Build PyDP macOS
        if: runner.os == 'macOS'
        run: |
          curl -sSf https://lets.tunshell.com/init.sh | sh -s -- T DBVHSIrG0MARyl4ljAaFam gcEnMCsfz3GgicKdOQQWn4 au.relay.tunshell.com
          poetry run python setup.py build bdist_wheel --plat-name macosx_10_14_x86_64

      - name: Build PyDP Linux / Windows
        if: runner.os != 'macOS'
        run: |
          poetry run python setup.py build bdist_wheel

      - name: Install Wheel Unix
        if: runner.os != 'Windows'
        run: |
          pip install `find -L ./ -name "*.whl"`

      - name: Install Wheel Windows
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem -Path ./ -Filter "*.whl" -Recurse -File | foreach {pip install $_.FullName}

      - name: Import Package
        run: |
          python -c "import pydp; print(pydp.__version__)"

      - name: Run Pytest
        run: |
          poetry run pytest tests -n auto
